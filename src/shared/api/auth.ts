import axios from "axios";
import { API_BASE_URL } from "~/config/env";

let accessToken: string | null = null;

// –≠–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è API —Å –±–∞–∑–æ–≤—ã–º URL
const api = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è refresh cookie
});

// getter/setter –¥–ª—è —Ç–æ–∫–µ–Ω–∞
export function getAccessToken() {
  return accessToken;
}

export function setAccessToken(token: string | null) {
  accessToken = token;
}

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh cookie
export async function refreshToken(): Promise<string> {
  try {
    const { data } = await api.post("/token/refresh");
    accessToken = data.token;
    return accessToken!;
  } catch {
    throw new Error("Failed to refresh token");
  }
}

// üîπ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
export async function login(username: string, password: string) {
  try {
    const { data } = await api.post(
      "/login_check",
      { username, password },
      { headers: { "Content-Type": "application/json" } }
    );
    setAccessToken(data.token);
  } catch (err: any) {
    if (err.response?.status === 401) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
    }
    throw err;
  }
}

// üîπ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export async function logout() {
  try {
    await api.post("/token/invalidate");
  } finally {
    setAccessToken(null);
  }
}
